import time
# Main program function defined below
def main():
   # TODO 0: Measures total program runtime by collecting start time
    start_timer = time.time()
    print("Timer Started")
     # Replace sleep(75) below with code you want to time
    time.sleep(30)
    end_timer=time.time()
        # TODO 0: Measure total program runtime by collecting end time
    total_time = end_timer - start_timer
    print("Total Elapsed Runtime:", total_time, "in seconds.")
   
    # TODO 1: Define get_input_args function within the file get_input_args.py
    # This function retrieves 3 Command Line Arugments from user as input from
    # the user running the program from a terminal window. This function returns
    # the collection of these command line arguments from the function call as
    # the variable in_arg
import argparse
def get_input_args():
    # Create Parse using ArgumentParser
    parser = argparse.ArgumentParser()
    # Assigns variable in_args to parse_args()
    in_args = parser.parse_args()

    # Create 3 command line arguments as mentioned above using add_argument() from ArguementParser method
    # Argument #1
    parser.add_argument('--dir', type = str, default = 'pet_images/', 
                    help = 'path to the folder of pet images')
  
    # Argument #2
    parser.add_argument('--arch', type = str, default = 'vgg', 
                    help = 'CNN Model vgg')
    
    # Argument #3
    parser.add_argument('--dogfile', type = str, default = 'dognames.txt', 
                    help = 'Dognames text file') 
    
    # Replace None with parser.parse_args() parsed argument collection that 
    # you created with this function
    return parser.parse_args()
    
    # Function that checks command line arguments using in_arg  
    check_command_line_arguments(in_arg)
    
    # Imports python modules    
from os import listdir

#set directory 
filename_list = listdir("pet_images/")

    # TODO 2: Define get_pet_labels function within the file get_pet_labels.py
    # Once the get_pet_labels function has been defined replace 'None' 
    # in the function call with in_arg.dir  Once you have done the replacements
    # your function call should look like this: 
    #             get_pet_labels(in_arg.dir)
    # This function creates the results dictionary that contains the results, 
    # this dictionary is returned from the function call as the variable results


def get_pet_labels(image_dir):
    
    # Function that checks Pet Images in the results Dictionary using results    
#    check_creating_pet_image_labels(results)
    in_files = listdir("pet_images/")
#   set dictionary    
    results_dic = dict()
    
    for idx in range(0, len(in_files), 1):
        if in_files[idx][0] != ".":
            pet_labels = ""
            name = in_files[idx].lower().split("_")
 
            for word in name:
                if word.isalpha():
                    pet_labels += word.lower + " "
            pet_labels = pet_labels.strip()
               
            if in_files[idx] not in results_dic:
                print('adding {} to {}'.format([pet_labels], in_files[idx]))
            results_dic[in_files[idx]] = [pet_labels]

        else:
            print("** Warning: Key=", in_files[idx],
          "already exists in results_dic with value =",

                results_dic[in_files[idx]])
                   
    # Replace None with the results_dic dictionary that you created with this
    # function
    return results_dic
